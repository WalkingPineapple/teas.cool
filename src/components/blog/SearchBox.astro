---
interface Props {
  placeholder?: string;
  class?: string;
}

const { placeholder = "搜索文章...", class: className } = Astro.props;
---

<div class={`search-box ${className || ''}`}>
  <div class="search-input-wrapper">
    <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="11" cy="11" r="8"></circle>
      <path d="M21 21l-4.35-4.35"></path>
    </svg>
    <input
      type="text"
      id="search-input"
      class="search-input"
      placeholder={placeholder}
      autocomplete="off"
    />
    <button class="clear-search" id="clear-search" aria-label="清除搜索">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>

  <div class="search-results" id="search-results">
    <div class="search-status" id="search-status"></div>
    <div class="results-list" id="results-list"></div>
  </div>
</div>

<style>
  .search-box {
    position: relative;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-icon {
    position: absolute;
    left: var(--space-3);
    color: var(--color-text-muted);
    pointer-events: none;
    z-index: 2;
  }

  .search-input {
    width: 100%;
    padding: var(--space-3) var(--space-12) var(--space-3) var(--space-12);
    font-size: var(--text-base);
    font-family: var(--font-family-sans);
    background-color: var(--color-surface);
    border: 2px solid var(--color-border);
    border-radius: var(--border-radius-lg);
    color: var(--color-text-primary);
    transition: all var(--transition-fast);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-primary) 20%, transparent);
  }

  .clear-search {
    position: absolute;
    right: var(--space-3);
    background: none;
    border: none;
    color: var(--color-text-muted);
    cursor: pointer;
    padding: var(--space-1);
    border-radius: calc(var(--border-radius) * 0.5);
    transition: all var(--transition-fast);
    opacity: 0;
    visibility: hidden;
  }

  .clear-search.visible {
    opacity: 1;
    visibility: visible;
  }

  .clear-search:hover {
    background-color: var(--color-border);
    color: var(--color-text-primary);
  }

  .search-results {
    position: absolute;
    top: calc(100% + var(--space-2));
    left: 0;
    right: 0;
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    box-shadow: 0 8px 32px var(--color-shadow);
    max-height: 400px;
    overflow-y: auto;
    z-index: 1000;
    display: none;
  }

  .search-results.visible {
    display: block;
  }

  .search-status {
    padding: var(--space-4);
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    text-align: center;
  }

  .results-list {
    padding: var(--space-2);
  }

  .result-item {
    display: block;
    padding: var(--space-4);
    text-decoration: none;
    border-radius: var(--border-radius);
    transition: background-color var(--transition-fast);
    border-bottom: 1px solid var(--color-border);
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .result-item:hover {
    background-color: var(--color-surface);
  }

  .result-title {
    font-size: var(--text-base);
    font-weight: 600;
    color: var(--color-text-primary);
    margin: 0 0 var(--space-2) 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .result-excerpt {
    font-size: var(--text-sm);
    color: var(--color-text-secondary);
    margin: 0 0 var(--space-2) 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
  }

  .result-meta {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    font-size: var(--text-xs);
    color: var(--color-text-muted);
  }

  .result-date {
    font-family: var(--font-family-mono);
  }

  .result-tags {
    display: flex;
    gap: var(--space-1);
  }

  .result-tag {
    color: var(--color-accent);
    font-family: var(--font-family-mono);
  }

  /* 高亮匹配文本 */
  .search-highlight {
    background-color: color-mix(in srgb, var(--color-accent) 30%, transparent);
    color: var(--color-text-primary);
    font-weight: 600;
    padding: 1px 2px;
    border-radius: 2px;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .search-input {
      font-size: var(--text-sm);
    }

    .search-results {
      max-height: 300px;
    }
  }
</style>

<script>
  import { formatDate } from '../../utils/theme.js';

  class SearchBox {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.clearButton = document.getElementById('clear-search');
      this.searchResults = document.getElementById('search-results');
      this.searchStatus = document.getElementById('search-status');
      this.resultsList = document.getElementById('results-list');
      this.posts = [];
      this.isLoading = true;

      this.init();
    }

    async init() {
      await this.loadPosts();
      this.bindEvents();
    }

    async loadPosts() {
      try {
        const response = await fetch('/api/posts.json');
        this.posts = await response.json();
        this.isLoading = false;
      } catch (error) {
        console.error('Failed to load posts:', error);
        this.isLoading = false;
        this.showStatus('搜索功能暂时不可用');
      }
    }

    bindEvents() {
      this.searchInput.addEventListener('input', this.handleSearch.bind(this));
      this.searchInput.addEventListener('focus', this.handleFocus.bind(this));
      this.clearButton.addEventListener('click', this.clearSearch.bind(this));

      // 点击外部关闭搜索结果
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-box')) {
          this.hideResults();
        }
      });

      // ESC 键关闭搜索结果
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.hideResults();
          this.searchInput.blur();
        }
      });
    }

    handleSearch(e) {
      const query = e.target.value.trim();

      if (query.length === 0) {
        this.hideResults();
        this.hideClearButton();
        return;
      }

      this.showClearButton();

      if (this.isLoading) {
        this.showStatus('正在加载...');
        this.showResults();
        return;
      }

      if (query.length < 2) {
        this.showStatus('请输入至少 2 个字符');
        this.showResults();
        return;
      }

      const results = this.searchPosts(query);
      this.displayResults(results, query);
    }

    handleFocus() {
      const query = this.searchInput.value.trim();
      if (query.length >= 2 && !this.isLoading) {
        const results = this.searchPosts(query);
        this.displayResults(results, query);
      }
    }

    searchPosts(query) {
      const lowerQuery = query.toLowerCase();

      return this.posts.filter(post => {
        // 搜索标题、描述、标签和内容
        const titleMatch = post.title.toLowerCase().includes(lowerQuery);
        const descMatch = post.description?.toLowerCase().includes(lowerQuery);
        const tagMatch = post.tags?.some(tag => tag.toLowerCase().includes(lowerQuery));
        const contentMatch = post.content?.toLowerCase().includes(lowerQuery);

        return titleMatch || descMatch || tagMatch || contentMatch;
      }).sort((a, b) => {
        // 按标题匹配优先级排序
        const aTitle = a.title.toLowerCase().includes(lowerQuery);
        const bTitle = b.title.toLowerCase().includes(lowerQuery);

        if (aTitle && !bTitle) return -1;
        if (!aTitle && bTitle) return 1;

        // 按日期排序
        return new Date(b.date) - new Date(a.date);
      });
    }

    displayResults(results, query) {
      if (results.length === 0) {
        this.showStatus('没有找到相关文章');
        this.resultsList.innerHTML = '';
      } else {
        this.showStatus(`找到 ${results.length} 篇文章`);
        this.resultsList.innerHTML = results.map(post => this.renderResult(post, query)).join('');
      }

      this.showResults();
    }

    renderResult(post, query) {
      const highlightedTitle = this.highlightText(post.title, query);
      const highlightedExcerpt = this.highlightText(post.description || post.excerpt || '', query);
      const formattedDate = formatDate(post.date);
      const tags = post.tags?.slice(0, 3) || [];

      return `
        <a href="${post.url}" class="result-item">
          <h4 class="result-title">${highlightedTitle}</h4>
          <p class="result-excerpt">${highlightedExcerpt}</p>
          <div class="result-meta">
            <span class="result-date">${formattedDate}</span>
            ${tags.length > 0 ? `
              <div class="result-tags">
                ${tags.map(tag => `<span class="result-tag">#${tag}</span>`).join(' ')}
              </div>
            ` : ''}
          </div>
        </a>
      `;
    }

    highlightText(text, query) {
      if (!text || !query) return text;

      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<span class="search-highlight">$1</span>');
    }

    showStatus(message) {
      this.searchStatus.textContent = message;
    }

    showResults() {
      this.searchResults.classList.add('visible');
    }

    hideResults() {
      this.searchResults.classList.remove('visible');
    }

    showClearButton() {
      this.clearButton.classList.add('visible');
    }

    hideClearButton() {
      this.clearButton.classList.remove('visible');
    }

    clearSearch() {
      this.searchInput.value = '';
      this.hideResults();
      this.hideClearButton();
      this.searchInput.focus();
    }
  }

  // 初始化搜索功能
  document.addEventListener('DOMContentLoaded', () => {
    new SearchBox();
  });
</script>